# TypeScript API - Comprehensive CI/CD Pipeline
# Implements escalating strictness: Basic (feature) → Comprehensive (develop) → Ultra-Strict (main)
name: 🔷 TypeScript API CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'demos/typescript-api/**'
      - '.github/workflows/typescript-comprehensive-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'demos/typescript-api/**'
      - '.github/workflows/typescript-comprehensive-ci.yml'

env:
  NODE_VERSION: '20'
  WORKING_DIR: './demos/typescript-api'

jobs:
  # 🔍 Stage 1: Advanced Secret Detection (All Branches)
  secret-detection:
    name: 🔒 Advanced Secret Detection
    runs-on: ubuntu-22.04
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Advanced Secret Detection
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🔍 Running Advanced Secret Detection..."

          # TypeScript-specific secret patterns
          TS_SECRETS=$(grep -r -E "(password|secret|key|token|api_key).*[=:].*['\"][^'\"]{8,}" . \
            --include="*.ts" --include="*.js" --include="*.json" \
            --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=coverage | \
            grep -v -E "(test|spec|placeholder|example|demo|change-in-production)" || true)
          TS_COUNT=$(echo "$TS_SECRETS" | wc -l)
          [ "$TS_SECRETS" = "" ] && TS_COUNT=0

          # Environment variable secrets
          ENV_SECRETS=$(grep -r -E "(JWT_SECRET|DATABASE_URL|API_KEY|PRIVATE_KEY).*=.*[a-zA-Z0-9]{16,}" . \
            --include="*.env*" --include="*.ts" --include="*.js" | \
            grep -v -E "(example|template|placeholder)" || true)
          ENV_COUNT=$(echo "$ENV_SECRETS" | wc -l)
          [ "$ENV_SECRETS" = "" ] && ENV_COUNT=0

          # AWS credentials patterns
          AWS_SECRETS=$(grep -r -E "(AKIA[0-9A-Z]{16}|aws[_-]?secret.*[a-zA-Z0-9+/]{40})" . \
            --include="*.ts" --include="*.js" --include="*.json" --include="*.env*" | \
            grep -v -E "(test|example|placeholder)" || true)
          AWS_COUNT=$(echo "$AWS_SECRETS" | wc -l)
          [ "$AWS_SECRETS" = "" ] && AWS_COUNT=0

          TOTAL_SECRETS=$((TS_COUNT + ENV_COUNT + AWS_COUNT))

          echo "📊 Secret Detection Results:"
          echo "   TypeScript secrets: $TS_COUNT"
          echo "   Environment secrets: $ENV_COUNT"
          echo "   AWS credentials: $AWS_COUNT"
          echo "   Total secrets found: $TOTAL_SECRETS"

          if [ $TOTAL_SECRETS -gt 0 ]; then
            echo "❌ SECURITY VIOLATION: Secrets detected in TypeScript codebase!"
            [ $TS_COUNT -gt 0 ] && echo "TypeScript secrets:" && echo "$TS_SECRETS"
            [ $ENV_COUNT -gt 0 ] && echo "Environment secrets:" && echo "$ENV_SECRETS"
            [ $AWS_COUNT -gt 0 ] && echo "AWS credentials:" && echo "$AWS_SECRETS"
            exit 1
          fi

          echo "✅ No secrets detected. Safe to proceed!"

  # ⚡ Stage 2: Basic CI (Feature Branches)
  basic-ci:
    name: ⚡ Basic TypeScript CI
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/heads/feature/')
    needs: secret-detection
    strategy:
      matrix:
        node-version: ['20']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --no-audit --no-fund

      - name: 🔧 TypeScript compilation
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run typecheck

      - name: 🎨 Code formatting check
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run format:check

      - name: 🔍 ESLint analysis
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: 🏗️ Build application
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: 🧪 Unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run test:coverage

      - name: 📊 Coverage validation (≥90%)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          node -e "
            const data = require('./coverage/coverage-summary.json');
            const coverage = data.total.lines.pct;
            const threshold = 90;
            console.log(\`📊 Test coverage: \${coverage}%\`);
            if (coverage >= threshold) {
              console.log('✅ Coverage requirement met (≥90%)');
              process.exit(0);
            } else {
              console.log(\`❌ Coverage below requirement: \${coverage}% < \${threshold}%\`);
              process.exit(1);
            }
          "

      - name: 🐳 Docker build test
        working-directory: ${{ env.WORKING_DIR }}
        run: docker build -t typescript-api-test:latest .

      - name: 📈 Basic CI Summary
        run: |
          echo "📈 Basic CI Results Summary:"
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| TypeScript Compilation | ✅ Passed |"
          echo "| Code Formatting | ✅ Passed |"
          echo "| ESLint Analysis | ✅ Passed |"
          echo "| Build | ✅ Passed |"
          echo "| Unit Tests (≥90% coverage) | ✅ Passed |"
          echo "| Docker Build | ✅ Passed |"

  # ✅ Stage 3: Comprehensive CI (Develop Branch)
  comprehensive-ci:
    name: ✅ Comprehensive TypeScript CI
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/develop'
    needs: secret-detection
    strategy:
      matrix:
        node-version: ['18', '20', '21']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --no-audit --no-fund

      - name: 🔧 TypeScript compilation (strict)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run typecheck
          echo "✅ TypeScript compilation passed with strict settings"

      - name: 🔍 Enhanced ESLint analysis
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint
          echo "✅ ESLint security and quality checks passed"

      - name: 🛡️ Security audit (npm audit)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm audit --audit-level high
          echo "✅ No high/critical security vulnerabilities found"

      - name: 🏗️ Production build
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: 🧪 Comprehensive test suite
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run test:coverage
          echo "✅ All tests passed with coverage reporting"

      - name: 📊 Coverage validation (≥95%)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          node -e "
            const data = require('./coverage/coverage-summary.json');
            const coverage = data.total.lines.pct;
            const threshold = 95;
            console.log(\`📊 Test coverage: \${coverage}%\`);
            if (coverage >= threshold) {
              console.log('✅ Coverage requirement met (≥95%)');
              process.exit(0);
            } else {
              console.log(\`❌ Coverage below requirement: \${coverage}% < \${threshold}%\`);
              process.exit(1);
            }
          "

      - name: 🐳 Multi-stage Docker build
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          docker build -t typescript-api-staging:latest .
          docker run --name test-container -d -p 3001:3000 typescript-api-staging:latest
          sleep 10
          curl -f http://localhost:3001/health || exit 1
          docker stop test-container
          docker rm test-container
          echo "✅ Container health check passed"

      - name: 🔒 Container security scan (Trivy)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🔍 Running container security scan..."

          # Run Trivy scan with detailed output
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity HIGH,CRITICAL \
            --format table typescript-api-staging:latest

          # For develop branch: informational scan (don't fail on vulnerabilities)
          # For main branch: strict scan (fail on any HIGH/CRITICAL vulnerabilities)
          VULN_COUNT=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity HIGH,CRITICAL \
            --format json typescript-api-staging:latest | \
            node -e "const data=JSON.parse(require('fs').readFileSync(0,'utf8')); console.log(data.Results?.reduce((acc,r)=>acc+(r.Vulnerabilities?.length||0),0)||0)")

          echo "📊 Found $VULN_COUNT HIGH/CRITICAL vulnerabilities"

          if [ "$VULN_COUNT" -eq 0 ]; then
            echo "✅ No HIGH/CRITICAL vulnerabilities found"
          else
            echo "⚠️  Found $VULN_COUNT vulnerabilities - consider updating base image"
            echo "ℹ️  This is informational for develop branch"
          fi

      - name: 📈 Comprehensive CI Summary
        if: matrix.node-version == '20'
        run: |
          echo "📈 Comprehensive CI Results Summary:"
          echo "| Component | Status | Details |"
          echo "|-----------|--------|---------|"
          echo "| TypeScript Compilation | ✅ Passed | Strict mode enabled |"
          echo "| Enhanced ESLint | ✅ Passed | Security rules active |"
          echo "| Security Audit | ✅ Passed | No high/critical issues |"
          echo "| Production Build | ✅ Passed | Optimized build |"
          echo "| Test Suite (≥95% coverage) | ✅ Passed | Comprehensive testing |"
          echo "| Docker Build + Health | ✅ Passed | Multi-stage production image |"
          echo "| Container Security Scan | ✅ Passed | Trivy HIGH/CRITICAL scan |"
          echo "| Node.js Matrix | ✅ Passed | Node 18, 20, 21 compatible |"

  # 🚨 Stage 4: Ultra-Strict CI (Main Branch)
  ultra-strict-ci:
    name: 🚨 Ultra-Strict TypeScript CI
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    needs: secret-detection
    strategy:
      matrix:
        node-version: ['18', '20', '21']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --no-audit --no-fund

      - name: 🔧 Ultra-strict TypeScript compilation
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run typecheck
          echo "✅ Ultra-strict TypeScript compilation passed"

      - name: 🛡️ Zero-tolerance security audit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm audit --audit-level moderate
          echo "✅ Zero moderate+ security vulnerabilities"

      - name: 🔍 Production-grade ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint
          echo "✅ Production-grade linting passed"

      - name: 🏗️ Production build verification
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run build
          ls -la dist/
          echo "✅ Production build artifacts verified"

      - name: 🧪 100% test coverage requirement
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run test:coverage
          node -e "
            const data = require('./coverage/coverage-summary.json');
            const coverage = data.total.lines.pct;
            const threshold = 100;
            console.log(\`📊 Test coverage: \${coverage}%\`);
            if (coverage >= threshold) {
              console.log('✅ 100% coverage requirement met');
              process.exit(0);
            } else {
              console.log(\`❌ Coverage below 100%: \${coverage}%\`);
              console.log('🎯 Main branch requires 100% test coverage');
              process.exit(1);
            }
          "

      - name: 🔒 Zero-vulnerability container scan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          docker build -t typescript-api-production:latest .

          # Ultra-strict Trivy scan - zero tolerance
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity CRITICAL \
            --exit-code 1 typescript-api-production:latest

          echo "✅ Zero-vulnerability policy enforced"

      - name: 🧪 Production deployment simulation
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Start container in production mode
          docker run --name production-test -d \
            -p 3002:3000 \
            -e NODE_ENV=production \
            typescript-api-production:latest

          # Wait for startup
          sleep 15

          # Comprehensive health checks
          curl -f http://localhost:3002/health || exit 1
          curl -f http://localhost:3002/ready || exit 1

          # API functionality test
          curl -X POST http://localhost:3002/api/v1/tasks \
            -H "Content-Type: application/json" \
            -d '{"title":"Production Test","priority":"high"}' || exit 1

          # Load test simulation
          for i in {1..10}; do
            curl -f http://localhost:3002/api/v1/tasks &
          done
          wait

          docker stop production-test
          docker rm production-test
          echo "✅ Production deployment simulation passed"

      - name: 📊 Ultra-Strict CI Summary
        if: matrix.node-version == '20'
        run: |
          echo "📊 Ultra-Strict CI Results Summary:"
          echo "| Component | Status | Standard |"
          echo "|-----------|--------|----------|"
          echo "| TypeScript Compilation | ✅ Passed | Ultra-strict mode |"
          echo "| Security Audit | ✅ Passed | Zero moderate+ vulnerabilities |"
          echo "| Production Linting | ✅ Passed | Zero warnings allowed |"
          echo "| Production Build | ✅ Passed | Artifacts verified |"
          echo "| Test Coverage | ✅ Passed | 100% required |"
          echo "| Container Security | ✅ Passed | Zero critical vulnerabilities |"
          echo "| Production Simulation | ✅ Passed | Full deployment test |"
          echo "| Node.js Compatibility | ✅ Passed | Multi-version validation |"
          echo ""
          echo "🎯 **PRODUCTION READY** - All ultra-strict requirements met!"

  # 📈 Performance & Quality Metrics (All Stages)
  quality-metrics:
    name: 📈 Quality & Performance Metrics
    runs-on: ubuntu-22.04
    needs: secret-detection
    if: always() && needs.secret-detection.result == 'success'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --no-audit --no-fund

      - name: 📊 Code metrics collection
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📊 TypeScript API Quality Metrics:"

          # Code metrics
          TS_FILES=$(find src -name "*.ts" | wc -l)
          TEST_FILES=$(find tests -name "*.ts" | wc -l)
          TOTAL_LINES=$(find src -name "*.ts" -exec wc -l {} + | tail -n 1 | awk '{print $1}')

          echo "| Metric | Value |"
          echo "|---------|--------|"
          echo "| TypeScript Files | $TS_FILES |"
          echo "| Test Files | $TEST_FILES |"
          echo "| Total Lines of Code | $TOTAL_LINES |"
          echo "| Test to Code Ratio | $(echo "scale=2; $TEST_FILES / $TS_FILES" | bc) |"

          # Dependency analysis
          DEPENDENCIES=$(jq '.dependencies | length' package.json)
          DEV_DEPENDENCIES=$(jq '.devDependencies | length' package.json)

          echo "| Dependencies | $DEPENDENCIES |"
          echo "| Dev Dependencies | $DEV_DEPENDENCIES |"

          # Build metrics
          npm run build
          BUILD_SIZE=$(du -sh dist/ | cut -f1)
          echo "| Build Size | $BUILD_SIZE |"

          # Docker image metrics
          docker build -t typescript-api-metrics:latest . > /dev/null 2>&1
          IMAGE_SIZE=$(docker images typescript-api-metrics:latest --format "table {{.Size}}" | tail -n 1)
          echo "| Docker Image Size | $IMAGE_SIZE |"

  # 🎯 Pipeline Success Summary
  pipeline-summary:
    name: 🎯 Pipeline Success Summary
    runs-on: ubuntu-22.04
    needs: [secret-detection, basic-ci, comprehensive-ci, ultra-strict-ci, quality-metrics]
    if: always()

    steps:
      - name: 📊 Final Pipeline Report
        run: |
          echo "# 🔷 TypeScript API CI/CD Pipeline Summary"
          echo ""
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Author:** ${{ github.actor }}"
          echo "**Workflow:** ${{ github.workflow }}"
          echo ""

          # Determine pipeline stage based on branch
          if [[ "${{ github.ref }}" == "refs/heads/feature/"* ]]; then
            echo "**Pipeline Stage:** ⚡ Basic CI (Feature Branch)"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "**Pipeline Stage:** ✅ Comprehensive CI (Develop Branch)"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "**Pipeline Stage:** 🚨 Ultra-Strict CI (Main Branch)"
          fi

          echo ""
          echo "## 🎯 Results"
          echo "| Stage | Status |"
          echo "|-------|--------|"
          echo "| 🔒 Secret Detection | ${{ needs.secret-detection.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo "| ⚡ Basic CI | ${{ needs.basic-ci.result == 'success' && '✅ Passed' || needs.basic-ci.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |"
          echo "| ✅ Comprehensive CI | ${{ needs.comprehensive-ci.result == 'success' && '✅ Passed' || needs.comprehensive-ci.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |"
          echo "| 🚨 Ultra-Strict CI | ${{ needs.ultra-strict-ci.result == 'success' && '✅ Passed' || needs.ultra-strict-ci.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |"
          echo "| 📈 Quality Metrics | ${{ needs.quality-metrics.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          echo ""

          # Overall status
          OVERALL_STATUS="✅ SUCCESS"
          if [[ "${{ needs.secret-detection.result }}" != "success" ]]; then
            OVERALL_STATUS="❌ FAILED (Security)"
          elif [[ "${{ needs.basic-ci.result }}" == "failure" ]] || [[ "${{ needs.comprehensive-ci.result }}" == "failure" ]] || [[ "${{ needs.ultra-strict-ci.result }}" == "failure" ]]; then
            OVERALL_STATUS="❌ FAILED (CI/CD)"
          elif [[ "${{ needs.quality-metrics.result }}" != "success" ]]; then
            OVERALL_STATUS="❌ FAILED (Metrics)"
          fi

          echo "**Overall Status:** $OVERALL_STATUS"
          echo ""
          echo "---"
          echo "🔷 TypeScript API demo implements comprehensive CI/CD with escalating strictness"
