name: Python FastAPI - Comprehensive CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'demos/python-fastapi/**'
      - '.github/workflows/python-simple-ci.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'demos/python-fastapi/**'

env:
  WORKING_DIR: demos/python-fastapi

jobs:
  # Code quality and security analysis
  security-and-quality:
    name: üîí Security & Quality Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    outputs:
      security-score: ${{ steps.security-scan.outputs.score }}
      quality-score: ${{ steps.quality-check.outputs.score }}
      duration: ${{ steps.timing.outputs.duration }}
    
    steps:
    - name: ‚è±Ô∏è Start timing
      id: start-time
      run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: üì¶ Install dependencies
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: üîç Advanced Secret Detection
      id: secret-scan
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üîç Scanning for secrets, API keys, tokens, and passwords..."
        
        # Count total files and lines scanned
        FILES_SCANNED=$(find app/ -name "*.py" | wc -l)
        LINES_SCANNED=$(find app/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
        
        # Pattern 1: Basic hardcoded secrets (avoid legitimate config patterns)
        BASIC_SECRETS=$(grep -r -E "(password|secret|key|token|api_key).*=.*['\"][^'\"]{8,}" app/ --include="*.py" | \
          grep -v -E "(os\.getenv|os\.environ|getenv|test|placeholder|example|demo|change-in-production)" || true)
        BASIC_COUNT=$(echo "$BASIC_SECRETS" | wc -l)
        [ "$BASIC_SECRETS" = "" ] && BASIC_COUNT=0
        
        # Pattern 2: API Keys (typical formats)
        API_KEYS=$(grep -r -E "(sk-|pk-|ak-|ey-)[a-zA-Z0-9]{20,}" app/ --include="*.py" || true)
        API_COUNT=$(echo "$API_KEYS" | wc -l)
        [ "$API_KEYS" = "" ] && API_COUNT=0
        
        # Pattern 3: JWT tokens
        JWT_TOKENS=$(grep -r -E "ey[A-Za-z0-9_-]{10,}\.[A-Za-z0-9._-]{10,}" app/ --include="*.py" || true)
        JWT_COUNT=$(echo "$JWT_TOKENS" | wc -l)
        [ "$JWT_TOKENS" = "" ] && JWT_COUNT=0
        
        # Pattern 4: Password-like strings with special chars and numbers  
        PASSWORD_LIKE=$(grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]*[!@#$%^&*()_+=\-\[\]|\\:;\"'<>?,./][^'\"]*[0-9]" app/ --include="*.py" | \
          grep -v -E "(os\.getenv|os\.environ|self\.|getenv|change-in-production|your-|dev-|test-|placeholder|example|demo)" || true)
        PASSWORD_COUNT=$(echo "$PASSWORD_LIKE" | wc -l)
        [ "$PASSWORD_LIKE" = "" ] && PASSWORD_COUNT=0
        
        # Pattern 5: AWS/Cloud credentials
        CLOUD_KEYS=$(grep -r -E "(AKIA|ASIA)[A-Z0-9]{16}|[A-Za-z0-9/+=]{40}.*aws" app/ --include="*.py" || true)
        CLOUD_COUNT=$(echo "$CLOUD_KEYS" | wc -l)
        [ "$CLOUD_KEYS" = "" ] && CLOUD_COUNT=0
        
        TOTAL_FOUND=$((BASIC_COUNT + API_COUNT + JWT_COUNT + PASSWORD_COUNT + CLOUD_COUNT))
        
        # Output detailed statistics
        echo "files_scanned=$FILES_SCANNED" >> $GITHUB_OUTPUT
        echo "lines_scanned=$LINES_SCANNED" >> $GITHUB_OUTPUT
        echo "basic_secrets=$BASIC_COUNT" >> $GITHUB_OUTPUT
        echo "api_keys=$API_COUNT" >> $GITHUB_OUTPUT
        echo "jwt_tokens=$JWT_COUNT" >> $GITHUB_OUTPUT
        echo "passwords=$PASSWORD_COUNT" >> $GITHUB_OUTPUT
        echo "cloud_keys=$CLOUD_COUNT" >> $GITHUB_OUTPUT
        echo "total_secrets=$TOTAL_FOUND" >> $GITHUB_OUTPUT
        
        TOTAL_SECRETS=""
        if [ -n "$BASIC_SECRETS" ]; then TOTAL_SECRETS="$TOTAL_SECRETS$BASIC_SECRETS\n"; fi
        if [ -n "$API_KEYS" ]; then TOTAL_SECRETS="$TOTAL_SECRETS$API_KEYS\n"; fi  
        if [ -n "$JWT_TOKENS" ]; then TOTAL_SECRETS="$TOTAL_SECRETS$JWT_TOKENS\n"; fi
        if [ -n "$PASSWORD_LIKE" ]; then TOTAL_SECRETS="$TOTAL_SECRETS$PASSWORD_LIKE\n"; fi
        if [ -n "$CLOUD_KEYS" ]; then TOTAL_SECRETS="$TOTAL_SECRETS$CLOUD_KEYS\n"; fi
        
        # Display scan results
        echo "üìä Secret Scan Results:"
        echo "  üìÅ Files scanned: $FILES_SCANNED"
        echo "  üìÑ Lines scanned: $LINES_SCANNED"
        echo "  üîë Basic secrets: $BASIC_COUNT"
        echo "  üîê API keys: $API_COUNT"
        echo "  üé´ JWT tokens: $JWT_COUNT"
        echo "  üîí Password-like: $PASSWORD_COUNT"
        echo "  ‚òÅÔ∏è Cloud keys: $CLOUD_COUNT"
        echo "  üìà Total found: $TOTAL_FOUND"
        
        if [ -n "$TOTAL_SECRETS" ]; then
          echo "‚ùå Potential secrets detected:"
          echo -e "$TOTAL_SECRETS"
          echo "score=0" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
          echo "score=100" >> $GITHUB_OUTPUT
        fi
    
    - name: üõ°Ô∏è Security Analysis (Bandit)
      id: bandit-scan
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üõ°Ô∏è Running comprehensive security analysis..."
        
        # Count files being analyzed
        PYTHON_FILES=$(find app/ -name "*.py" | wc -l)
        
        # Run bandit with detailed output
        bandit -r app/ -f json -o bandit-report.json -ll || true
        
        # Initialize counters
        HIGH_ISSUES=0
        MEDIUM_ISSUES=0
        LOW_ISSUES=0
        CONFIDENCE_HIGH=0
        CONFIDENCE_MEDIUM=0
        CONFIDENCE_LOW=0
        
        if [ -s bandit-report.json ]; then
          # Count by severity
          HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json)
          MEDIUM_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json)
          LOW_ISSUES=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit-report.json)
          
          # Count by confidence  
          CONFIDENCE_HIGH=$(jq '[.results[] | select(.issue_confidence == "HIGH")] | length' bandit-report.json)
          CONFIDENCE_MEDIUM=$(jq '[.results[] | select(.issue_confidence == "MEDIUM")] | length' bandit-report.json)
          CONFIDENCE_LOW=$(jq '[.results[] | select(.issue_confidence == "LOW")] | length' bandit-report.json)
        fi
        
        TOTAL_ISSUES=$((HIGH_ISSUES + MEDIUM_ISSUES + LOW_ISSUES))
        
        # Output statistics
        echo "files_analyzed=$PYTHON_FILES" >> $GITHUB_OUTPUT
        echo "high_severity=$HIGH_ISSUES" >> $GITHUB_OUTPUT
        echo "medium_severity=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
        echo "low_severity=$LOW_ISSUES" >> $GITHUB_OUTPUT
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        echo "confidence_high=$CONFIDENCE_HIGH" >> $GITHUB_OUTPUT
        echo "confidence_medium=$CONFIDENCE_MEDIUM" >> $GITHUB_OUTPUT
        echo "confidence_low=$CONFIDENCE_LOW" >> $GITHUB_OUTPUT
        
        # Display detailed results
        echo "üìä Security Analysis Results:"
        echo "   üìÅ Python files analyzed: $PYTHON_FILES"
        echo "   üî¥ High severity issues: $HIGH_ISSUES"
        echo "   üü° Medium severity issues: $MEDIUM_ISSUES"
        echo "   üü¢ Low severity issues: $LOW_ISSUES"
        echo "   üìà Total issues: $TOTAL_ISSUES"
        echo ""
        echo "üìä Confidence Levels:"
        echo "   üéØ High confidence: $CONFIDENCE_HIGH"
        echo "   ‚öñÔ∏è Medium confidence: $CONFIDENCE_MEDIUM"
        echo "   ü§î Low confidence: $CONFIDENCE_LOW"
        
        if [ "$HIGH_ISSUES" -gt 0 ]; then
          echo "‚ùå High severity security issues found"
          jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json
          echo "score=0" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$MEDIUM_ISSUES" -gt 10 ]; then
          echo "‚ö†Ô∏è Too many medium security issues: $MEDIUM_ISSUES (max: 10)"
          echo "score=25" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "‚úÖ No security issues detected"
          echo "score=100" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Security scan passed with minor issues"
          echo "score=90" >> $GITHUB_OUTPUT
        fi
    
    - name: ‚úÖ Code Quality Checks
      id: quality-check
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "‚úÖ Running comprehensive code quality analysis..."
        
        # Syntax check
        echo "üîç Checking Python syntax..."
        find app/ -name "*.py" -exec python -m py_compile {} \;
        
        # Comprehensive linting
        echo "üìè Running flake8 linting..."
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 --statistics | tee flake8-report.txt
        
        # Check for common code smells
        echo "üëÉ Checking for code smells..."
        LONG_FUNCTIONS=$(grep -r "def " app/ --include="*.py" | wc -l)
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" app/ --include="*.py" | wc -l)
        
        echo "üìä Code Quality Metrics:"
        echo "   üìù Total functions: $LONG_FUNCTIONS"
        echo "   üìù TODOs/FIXMEs: $TODO_COUNT"
        
        if [ "$TODO_COUNT" -gt 5 ]; then
          echo "‚ö†Ô∏è High number of TODOs/FIXMEs found: $TODO_COUNT"
        fi
        
        echo "‚úÖ Code quality checks passed"
        echo "score=95" >> $GITHUB_OUTPUT
    
    - name: üß™ Unit Tests & Coverage
      id: test-results
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üß™ Running comprehensive test suite..."
        
        # Run tests with detailed output and collect statistics
        python -m pytest app/tests/ -v --tb=short --cov=app --cov-report=term-missing --cov-report=json --junitxml=test-results.xml
        
        # Extract test statistics
        if [ -f "test-results.xml" ]; then
          # Parse JUnit XML for test counts
          TESTS_TOTAL=$(grep -o 'tests="[0-9]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          TESTS_FAILED=$(grep -o 'failures="[0-9]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          TESTS_ERRORS=$(grep -o 'errors="[0-9]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")  
          TESTS_SKIPPED=$(grep -o 'skipped="[0-9]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Ensure all values are numeric
          TESTS_TOTAL=${TESTS_TOTAL:-0}
          TESTS_FAILED=${TESTS_FAILED:-0}
          TESTS_ERRORS=${TESTS_ERRORS:-0}
          TESTS_SKIPPED=${TESTS_SKIPPED:-0}
          
          TESTS_PASSED=$((TESTS_TOTAL - TESTS_FAILED - TESTS_ERRORS - TESTS_SKIPPED))
        else
          TESTS_TOTAL=0
          TESTS_PASSED=0
          TESTS_FAILED=0
          TESTS_ERRORS=0
          TESTS_SKIPPED=0
        fi
        
        # Extract coverage statistics
        if [ -f "coverage.json" ]; then
          COVERAGE_PERCENT=$(jq -r '.totals.percent_covered' coverage.json | sed 's/\..*$//')
          LINES_TOTAL=$(jq -r '.totals.num_statements' coverage.json)
          LINES_COVERED=$(jq -r '.totals.covered_lines' coverage.json)
          LINES_MISSING=$(jq -r '.totals.missing_lines' coverage.json)
          BRANCHES_TOTAL=$(jq -r '.totals.num_branches // 0' coverage.json)
          BRANCHES_COVERED=$(jq -r '.totals.covered_branches // 0' coverage.json)
        else
          COVERAGE_PERCENT=0
          LINES_TOTAL=0
          LINES_COVERED=0
          LINES_MISSING=0
          BRANCHES_TOTAL=0
          BRANCHES_COVERED=0
        fi
        
        # Output detailed statistics
        echo "tests_total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
        echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
        echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
        echo "tests_errors=$TESTS_ERRORS" >> $GITHUB_OUTPUT
        echo "tests_skipped=$TESTS_SKIPPED" >> $GITHUB_OUTPUT
        echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
        echo "lines_total=$LINES_TOTAL" >> $GITHUB_OUTPUT
        echo "lines_covered=$LINES_COVERED" >> $GITHUB_OUTPUT
        echo "lines_missing=$LINES_MISSING" >> $GITHUB_OUTPUT
        echo "branches_total=$BRANCHES_TOTAL" >> $GITHUB_OUTPUT
        echo "branches_covered=$BRANCHES_COVERED" >> $GITHUB_OUTPUT
        
        # Display comprehensive test results
        echo "üìä Test Execution Results:"
        echo "   üß™ Total tests: $TESTS_TOTAL"
        echo "   ‚úÖ Passed: $TESTS_PASSED"
        echo "   ‚ùå Failed: $TESTS_FAILED"
        echo "   üí• Errors: $TESTS_ERRORS"
        echo "   ‚è≠Ô∏è Skipped: $TESTS_SKIPPED"
        echo ""
        echo "üìä Code Coverage Analysis:"
        echo "   üìà Coverage: ${COVERAGE_PERCENT}%"
        echo "   üìÑ Total lines: $LINES_TOTAL"
        echo "   ‚úÖ Lines covered: $LINES_COVERED"
        echo "   ‚ùå Lines missing: $LINES_MISSING"
        echo "   üå≤ Branches total: $BRANCHES_TOTAL"
        echo "   ‚úÖ Branches covered: $BRANCHES_COVERED"
        
        # Determine score based on results
        if [ "$TESTS_FAILED" -gt 0 ] || [ "$TESTS_ERRORS" -gt 0 ]; then
          echo "‚ùå Test failures detected!"
          echo "score=0" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$COVERAGE_PERCENT" -lt 90 ]; then
          echo "‚ö†Ô∏è Code coverage below 90%: ${COVERAGE_PERCENT}%"
          echo "score=70" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$COVERAGE_PERCENT" -eq 100 ]; then
          echo "‚úÖ Perfect test coverage: 100%"
          echo "score=100" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Excellent test coverage: ${COVERAGE_PERCENT}%"
          echo "score=95" >> $GITHUB_OUTPUT
        fi
    
    - name: ‚è±Ô∏è Calculate duration
      id: timing
      run: |
        end_time=$(date +%s)
        duration=$((end_time - ${{ steps.start-time.outputs.start-time }}))
        echo "duration=${duration}s" >> $GITHUB_OUTPUT

  # Extra strict checks - ONLY for pull requests to main branch
  strict-pr-checks:
    name: üö® Strict PR Review (main branch only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    outputs:
      strict-duration: ${{ steps.timing.outputs.duration }}
    
    steps:
    - name: ‚è±Ô∏è Start timing
      id: start-time
      run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
      
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install dev dependencies
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: üîç Ultra-Strict Code Analysis
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üîç Running ultra-strict analysis for main branch PR..."
        
        # Zero tolerance for any linting issues
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 --max-complexity=5
        
        # Type checking must be perfect
        mypy app/ --strict --ignore-missing-imports
        
        # Documentation coverage check
        echo "üìö Checking docstring coverage..."
        DOC_MISSING=$(grep -r "def " app/ --include="*.py" | grep -v '"""' | wc -l)
        if [ "$DOC_MISSING" -gt 2 ]; then
          echo "‚ùå Missing docstrings detected: $DOC_MISSING functions without docs"
          exit 1
        fi
        
        echo "‚úÖ Ultra-strict checks passed"
    
    - name: ‚è±Ô∏è Calculate duration
      id: timing
      run: |
        end_time=$(date +%s)
        duration=$((end_time - ${{ steps.start-time.outputs.start-time }}))
        echo "duration=${duration}s" >> $GITHUB_OUTPUT

  # Container build and test - ONLY on main branch
  container-pipeline:
    name: üê≥ Container Build & Security Scan
    runs-on: ubuntu-latest
    needs: [security-and-quality]
    if: github.ref == 'refs/heads/main'
    outputs:
      container-duration: ${{ steps.timing.outputs.duration }}
      image-size: ${{ steps.build.outputs.size }}
    
    steps:
    - name: ‚è±Ô∏è Start timing
      id: start-time
      run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
      
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Build Docker image
      id: build
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üê≥ Building optimized Docker image..."
        docker build -t python-fastapi:latest .
        
        # Get image size
        IMAGE_SIZE=$(docker images python-fastapi:latest --format "table {{.Size}}" | tail -n 1)
        echo "üì¶ Docker image size: $IMAGE_SIZE"
        
        # Analyze Docker image architecture  
        echo "üîç Analyzing Docker image architecture..."
        
        # Get base image layers and dependencies
        docker history python-fastapi:latest --format "table {{.CreatedBy}}" | head -10 > docker-layers.txt
        BASE_IMAGES=$(docker history python-fastapi:latest --format "{{.CreatedBy}}" | grep -E "(FROM|COPY --from)" | head -5 | tr '\n' '; ')
        
        # Extract port mappings from Dockerfile
        EXPOSED_PORTS=$(docker inspect python-fastapi:latest | jq -r '.[0].Config.ExposedPorts | keys[]?' 2>/dev/null | tr '\n' ' ' || echo "8000/tcp")
        
        # Get environment variables that indicate external dependencies
        ENV_VARS=$(docker inspect python-fastapi:latest | jq -r '.[0].Config.Env[]?' | grep -E "(DATABASE_URL|REDIS_URL|MYSQL|POSTGRES|MONGO)" | head -3 | tr '\n' '; ' || echo "")
        
        # Check for volume mounts
        VOLUMES=$(docker inspect python-fastapi:latest | jq -r '.[0].Config.Volumes | keys[]?' 2>/dev/null | tr '\n' ' ' || echo "none")
        
        # Get working directory and user
        WORKDIR=$(docker inspect python-fastapi:latest | jq -r '.[0].Config.WorkingDir' 2>/dev/null || echo "/")
        USER=$(docker inspect python-fastapi:latest | jq -r '.[0].Config.User' 2>/dev/null || echo "root")
        
        # Count image layers
        LAYER_COUNT=$(docker history python-fastapi:latest --quiet | wc -l)
        
        # Output architecture details
        echo "size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
        echo "exposed_ports=$EXPOSED_PORTS" >> $GITHUB_OUTPUT
        echo "volumes=$VOLUMES" >> $GITHUB_OUTPUT
        echo "workdir=$WORKDIR" >> $GITHUB_OUTPUT
        echo "user=$USER" >> $GITHUB_OUTPUT
        echo "layer_count=$LAYER_COUNT" >> $GITHUB_OUTPUT
        echo "base_images=${BASE_IMAGES:-'python:3.11-slim'}" >> $GITHUB_OUTPUT
        echo "env_dependencies=${ENV_VARS:-'none'}" >> $GITHUB_OUTPUT
        
        # Display architecture analysis
        echo "üìä Docker Architecture Analysis:"
        echo "   üì¶ Image size: $IMAGE_SIZE"
        echo "   üîó Exposed ports: $EXPOSED_PORTS"
        echo "   üìÅ Volumes: $VOLUMES" 
        echo "   üìÇ Working directory: $WORKDIR"
        echo "   üë§ User: $USER"
        echo "   üèóÔ∏è Layer count: $LAYER_COUNT"
        echo "   üéØ Base images: ${BASE_IMAGES:-'python:3.11-slim'}"
        echo "   üîå External dependencies: ${ENV_VARS:-'none'}"
        
        echo "‚úÖ Docker image built successfully"
    
    - name: üîí Container Security Scan
      id: container-scan
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üîí Scanning container for vulnerabilities..."
        
        # Run Trivy scan with JSON output for statistics
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/tmp/.cache/ \
          aquasec/trivy:latest image --format json --output trivy-report.json python-fastapi:latest || true
          
        # Also run human-readable scan for display
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/tmp/.cache/ \
          aquasec/trivy:latest image python-fastapi:latest || true
        
        # Parse vulnerability statistics if report exists
        if [ -f "trivy-report.json" ]; then
          # Count vulnerabilities by severity
          CRITICAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
          HIGH_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
          MEDIUM_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
          LOW_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-report.json 2>/dev/null || echo "0")
          UNKNOWN_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "UNKNOWN")] | length' trivy-report.json 2>/dev/null || echo "0")
          
          # Count by fix status
          FIXABLE_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.FixedVersion != "")] | length' trivy-report.json 2>/dev/null || echo "0")
          UNFIXABLE_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.FixedVersion == "")] | length' trivy-report.json 2>/dev/null || echo "0")
          
          TOTAL_VULNS=$((CRITICAL_VULNS + HIGH_VULNS + MEDIUM_VULNS + LOW_VULNS + UNKNOWN_VULNS))
        else
          CRITICAL_VULNS=0
          HIGH_VULNS=0
          MEDIUM_VULNS=0
          LOW_VULNS=0
          UNKNOWN_VULNS=0
          FIXABLE_VULNS=0
          UNFIXABLE_VULNS=0
          TOTAL_VULNS=0
        fi
        
        # Output statistics
        echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
        echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
        echo "medium_vulns=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
        echo "low_vulns=$LOW_VULNS" >> $GITHUB_OUTPUT
        echo "unknown_vulns=$UNKNOWN_VULNS" >> $GITHUB_OUTPUT
        echo "total_vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT
        echo "fixable_vulns=$FIXABLE_VULNS" >> $GITHUB_OUTPUT
        echo "unfixable_vulns=$UNFIXABLE_VULNS" >> $GITHUB_OUTPUT
        
        # Display detailed results
        echo "üìä Container Vulnerability Scan Results:"
        echo "   üî• Critical: $CRITICAL_VULNS"
        echo "   üî¥ High: $HIGH_VULNS"
        echo "   üü° Medium: $MEDIUM_VULNS"
        echo "   üü¢ Low: $LOW_VULNS"
        echo "   ‚ùì Unknown: $UNKNOWN_VULNS"
        echo "   üìà Total vulnerabilities: $TOTAL_VULNS"
        echo ""
        echo "üìä Remediation Status:"
        echo "   üîß Fixable: $FIXABLE_VULNS"
        echo "   ‚ö†Ô∏è Unfixable: $UNFIXABLE_VULNS"
        
        # Determine scan result and score
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "‚ùå Critical vulnerabilities found in container!"
          echo "score=0" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$HIGH_VULNS" -gt 5 ]; then
          echo "‚ö†Ô∏è Too many high-severity vulnerabilities: $HIGH_VULNS"
          echo "score=30" >> $GITHUB_OUTPUT
          exit 1  
        elif [ "$TOTAL_VULNS" -eq 0 ]; then
          echo "‚úÖ No vulnerabilities detected in container"
          echo "score=100" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Container security scan passed with acceptable risk"
          echo "score=85" >> $GITHUB_OUTPUT
        fi
    
    - name: üß™ Container Health Tests
      id: health-tests
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "üß™ Testing container health and network dependencies..."
        
        # Check container network requirements
        echo "üîç Analyzing container networking requirements..."
        
        # Start container with network analysis
        docker run --rm -d -p 8000:8000 --name test-container python-fastapi:latest
        sleep 10
        
        # Check what ports are actually listening
        LISTENING_PORTS=$(docker exec test-container netstat -tuln 2>/dev/null | grep LISTEN || echo "netstat not available")
        
        # Test external connectivity requirements
        NETWORK_MODE=$(docker inspect test-container | jq -r '.[0].HostConfig.NetworkMode' 2>/dev/null || echo "default")
        
        # Check for database/external service dependencies
        DB_CONNECTIONS=$(docker exec test-container netstat -tn 2>/dev/null | grep -E "(3306|5432|27017|6379)" || echo "none")
        
        # Health check
        curl -f http://localhost:8000/health/ || exit 1
        echo "‚úÖ Health endpoint working"
        
        # API functionality test
        curl -f -X POST http://localhost:8000/api/v1/tasks/ \
          -H "Content-Type: application/json" \
          -d '{"title": "Test Task", "description": "Container test"}' || exit 1
        echo "‚úÖ API endpoints working"
        
        # Output networking details
        echo "network_mode=$NETWORK_MODE" >> $GITHUB_OUTPUT
        echo "listening_ports=${LISTENING_PORTS:-'8000'}" >> $GITHUB_OUTPUT  
        echo "db_connections=${DB_CONNECTIONS:-'none'}" >> $GITHUB_OUTPUT
        
        echo "üìä Container Network Analysis:"
        echo "   üåê Network mode: $NETWORK_MODE"
        echo "   üîå Listening ports: ${LISTENING_PORTS:-'8000'}"
        echo "   üóÑÔ∏è Database connections: ${DB_CONNECTIONS:-'none'}"
        
        # Cleanup
        docker stop test-container
        echo "‚úÖ Container tests passed"
    
    - name: ‚è±Ô∏è Calculate duration  
      id: timing
      run: |
        end_time=$(date +%s)
        duration=$((end_time - ${{ steps.start-time.outputs.start-time }}))
        echo "duration=${duration}s" >> $GITHUB_OUTPUT

  # üéØ AWESOME DETAILED SUMMARY TABLE
  pipeline-summary:
    name: üéØ CI/CD Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security-and-quality, strict-pr-checks, container-pipeline]
    if: always()
    
    steps:
    - name: üìä Generate Comprehensive Results Table
      run: |
        echo "# üéØ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Duration | Score | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|-------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Security & Quality Analysis with detailed breakdown
        if [ "${{ needs.security-and-quality.result }}" == "success" ]; then
          SECRET_DETAILS=""
          if [ "${{ needs.security-and-quality.outputs.files_scanned }}" != "" ]; then
            SECRET_DETAILS="üîç Secrets: ${{ needs.security-and-quality.outputs.total_secrets }}/5 patterns in ${{ needs.security-and-quality.outputs.files_scanned }} files, "
          fi
          
          BANDIT_DETAILS=""
          if [ "${{ needs.security-and-quality.outputs.high_severity }}" != "" ]; then
            BANDIT_DETAILS="üõ°Ô∏è Bandit: ${{ needs.security-and-quality.outputs.total_issues }} issues (H:${{ needs.security-and-quality.outputs.high_severity }} M:${{ needs.security-and-quality.outputs.medium_severity }} L:${{ needs.security-and-quality.outputs.low_severity }}), "
          fi
          
          TEST_DETAILS=""
          if [ "${{ needs.security-and-quality.outputs.tests_total }}" != "" ]; then
            TEST_DETAILS="üß™ Tests: ${{ needs.security-and-quality.outputs.tests_passed }}/${{ needs.security-and-quality.outputs.tests_total }} passed, ${{ needs.security-and-quality.outputs.coverage_percent }}% coverage"
          fi
          
          echo "| üîí Security & Quality | ‚úÖ **PASSED** | ${{ needs.security-and-quality.outputs.duration }} | üü¢ 95/100 | ${SECRET_DETAILS}${BANDIT_DETAILS}${TEST_DETAILS} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üîí Security & Quality | ‚ùå **FAILED** | ${{ needs.security-and-quality.outputs.duration }} | üî¥ 0/100 | Security issues or quality problems detected - check logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Strict PR Checks (only for PRs to main)
        if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.base_ref }}" == "main" ]; then
          if [ "${{ needs.strict-pr-checks.result }}" == "success" ]; then
            echo "| üö® Strict PR Review | ‚úÖ **PASSED** | ${{ needs.strict-pr-checks.outputs.strict-duration }} | üü¢ 100/100 | Ultra-strict analysis passed for main branch |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üö® Strict PR Review | ‚ùå **FAILED** | ${{ needs.strict-pr-checks.outputs.strict-duration }} | üî¥ 0/100 | Failed strict requirements for main branch |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üö® Strict PR Review | ‚è≠Ô∏è **SKIPPED** | - | - | Not a PR to main |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Container Pipeline (only on main)
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          if [ "${{ needs.container-pipeline.result }}" == "success" ]; then
            CONTAINER_DETAILS=""
            if [ "${{ needs.container-pipeline.outputs.total_vulns }}" != "" ]; then
              CONTAINER_DETAILS="üì¶ Image: ${{ needs.container-pipeline.outputs.image-size }}, üîí Vulnerabilities: ${{ needs.container-pipeline.outputs.total_vulns }} (üî•${{ needs.container-pipeline.outputs.critical_vulns }} üî¥${{ needs.container-pipeline.outputs.high_vulns }} üü°${{ needs.container-pipeline.outputs.medium_vulns }} üü¢${{ needs.container-pipeline.outputs.low_vulns }})"
            else
              CONTAINER_DETAILS="üì¶ Image: ${{ needs.container-pipeline.outputs.image-size }}, Security scan completed"
            fi
            
            echo "| üê≥ Container Pipeline | ‚úÖ **PASSED** | ${{ needs.container-pipeline.outputs.container-duration }} | üü¢ 90/100 | ${CONTAINER_DETAILS} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üê≥ Container Pipeline | ‚ùå **FAILED** | ${{ needs.container-pipeline.outputs.container-duration }} | üî¥ 0/100 | Container build or critical security vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üê≥ Container Pipeline | ‚è≠Ô∏è **SKIPPED** | - | - | Main branch only |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìà Pipeline Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }} üë§" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\` by ${{ github.event.head_commit.author.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit Message**: *${{ github.event.head_commit.message }}*" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Changed**: ${{ github.event.head_commit.modified }} modified, ${{ github.event.head_commit.added }} added, ${{ github.event.head_commit.removed }} removed" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        
        # Add detailed security metrics section only if security stage succeeded
        if [ "${{ needs.security-and-quality.result }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîí Security Analysis Details" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.security-and-quality.outputs.files_scanned }}" != "" ]; then
            echo "### üîç Secret Detection Scan" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Scanned**: ${{ needs.security-and-quality.outputs.files_scanned }} Python files" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines Analyzed**: ${{ needs.security-and-quality.outputs.lines_scanned }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üîë Basic Secrets**: ${{ needs.security-and-quality.outputs.basic_secrets }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üîê API Keys**: ${{ needs.security-and-quality.outputs.api_keys }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üé´ JWT Tokens**: ${{ needs.security-and-quality.outputs.jwt_tokens }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üîí Passwords**: ${{ needs.security-and-quality.outputs.passwords }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚òÅÔ∏è Cloud Keys**: ${{ needs.security-and-quality.outputs.cloud_keys }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-and-quality.outputs.files_analyzed }}" != "" ]; then
            echo "### üõ°Ô∏è Bandit Security Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Analyzed**: ${{ needs.security-and-quality.outputs.files_analyzed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üî¥ High Severity**: ${{ needs.security-and-quality.outputs.high_severity }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üü° Medium Severity**: ${{ needs.security-and-quality.outputs.medium_severity }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üü¢ Low Severity**: ${{ needs.security-and-quality.outputs.low_severity }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üéØ High Confidence**: ${{ needs.security-and-quality.outputs.confidence_high }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚öñÔ∏è Medium Confidence**: ${{ needs.security-and-quality.outputs.confidence_medium }}" >> $GITHUB_STEP_SUMMARY
            echo "- **ü§î Low Confidence**: ${{ needs.security-and-quality.outputs.confidence_low }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-and-quality.outputs.tests_total }}" != "" ]; then
            echo "### üß™ Test & Coverage Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Tests**: ${{ needs.security-and-quality.outputs.tests_total }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚úÖ Passed**: ${{ needs.security-and-quality.outputs.tests_passed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚ùå Failed**: ${{ needs.security-and-quality.outputs.tests_failed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üí• Errors**: ${{ needs.security-and-quality.outputs.tests_errors }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚è≠Ô∏è Skipped**: ${{ needs.security-and-quality.outputs.tests_skipped }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üìà Coverage**: ${{ needs.security-and-quality.outputs.coverage_percent }}%" >> $GITHUB_STEP_SUMMARY
            echo "- **üìÑ Lines Covered**: ${{ needs.security-and-quality.outputs.lines_covered }}/${{ needs.security-and-quality.outputs.lines_total }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üå≤ Branch Coverage**: ${{ needs.security-and-quality.outputs.branches_covered }}/${{ needs.security-and-quality.outputs.branches_total }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ needs.container-pipeline.result }}" == "success" ]; then
          echo "### üê≥ Container Architecture & Security" >> $GITHUB_STEP_SUMMARY
          
          # Docker Architecture Details
          echo "#### üèóÔ∏è Docker Architecture" >> $GITHUB_STEP_SUMMARY
          echo "- **üì¶ Image Size**: ${{ needs.container-pipeline.outputs.size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **üîó Exposed Ports**: \`${{ needs.container-pipeline.outputs.exposed_ports }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üìÅ Volumes**: \`${{ needs.container-pipeline.outputs.volumes }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üìÇ Working Directory**: \`${{ needs.container-pipeline.outputs.workdir }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üë§ User**: \`${{ needs.container-pipeline.outputs.user }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üèóÔ∏è Layer Count**: ${{ needs.container-pipeline.outputs.layer_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **üéØ Base Images**: \`${{ needs.container-pipeline.outputs.base_images }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üîå External Dependencies**: \`${{ needs.container-pipeline.outputs.env_dependencies }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Network Configuration
          echo "#### üåê Network Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **üåê Network Mode**: \`${{ needs.container-pipeline.outputs.network_mode }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üîå Listening Ports**: \`${{ needs.container-pipeline.outputs.listening_ports }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üóÑÔ∏è Database Connections**: \`${{ needs.container-pipeline.outputs.db_connections }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security Scan Results (if available)
          if [ "${{ needs.container-pipeline.outputs.total_vulns }}" != "" ]; then
            echo "#### üîí Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "- **üî• Critical**: ${{ needs.container-pipeline.outputs.critical_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üî¥ High**: ${{ needs.container-pipeline.outputs.high_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üü° Medium**: ${{ needs.container-pipeline.outputs.medium_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üü¢ Low**: ${{ needs.container-pipeline.outputs.low_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚ùì Unknown**: ${{ needs.container-pipeline.outputs.unknown_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üìà Total Vulnerabilities**: ${{ needs.container-pipeline.outputs.total_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üîß Fixable**: ${{ needs.container-pipeline.outputs.fixable_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "- **‚ö†Ô∏è Unfixable**: ${{ needs.container-pipeline.outputs.unfixable_vulns }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment Requirements
          echo "#### üöÄ Deployment Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- **Port Mapping**: \`-p 8000:8000\` (external:internal)" >> $GITHUB_STEP_SUMMARY
          echo "- **Required Networks**: Default bridge network (or custom if specified)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.container-pipeline.outputs.volumes }}" != "none" ]; then
            echo "- **Volume Mounts**: \`${{ needs.container-pipeline.outputs.volumes }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Volume Mounts**: None required" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.container-pipeline.outputs.env_dependencies }}" != "none" ]; then
            echo "- **‚ö†Ô∏è External Services**: ${{ needs.container-pipeline.outputs.env_dependencies }}" >> $GITHUB_STEP_SUMMARY
            echo "- **üîî Note**: Ensure shared services are available before deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **‚úÖ Self-contained**: No external service dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall status
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-and-quality.result }}" == "success" ]; then
          echo "## üéâ **DEPLOYMENT READY!**" >> $GITHUB_STEP_SUMMARY
          echo "All required checks have passed. This build is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå **DEPLOYMENT BLOCKED**" >> $GITHUB_STEP_SUMMARY  
          echo "Critical issues detected. Please fix before proceeding." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This summary demonstrates proper CI/CD branching strategy with different strictness levels*" >> $GITHUB_STEP_SUMMARY