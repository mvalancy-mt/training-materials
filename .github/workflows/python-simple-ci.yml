name: Python FastAPI - Simple CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'demos/python-fastapi/**'
      - '.github/workflows/python-simple-ci.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'demos/python-fastapi/**'

env:
  WORKING_DIR: demos/python-fastapi

jobs:
  # Basic quality checks - runs on all pushes
  basic-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx pytest-asyncio
    
    - name: Run basic syntax check
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        find app/ -name "*.py" -exec python -m py_compile {} \;
        echo "‚úÖ Python syntax is valid"
    
    - name: Run tests
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        python -m pytest app/tests/ -v
        echo "‚úÖ Tests passed"

  # Strict checks - only runs on pull requests to main
  strict-checks:
    name: Strict Quality & Security (PR to main only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dev dependencies
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run comprehensive linting
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        echo "‚úÖ Strict linting passed"
    
    - name: Security scan
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        echo "‚úÖ Security scan completed"

  # Docker build - runs on main branch pushes
  build-container:
    name: Build & Test Container
    runs-on: ubuntu-latest
    needs: basic-checks
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        docker build -t python-fastapi:latest .
        echo "‚úÖ Docker image built successfully"
    
    - name: Test container
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        docker run --rm -d -p 8000:8000 --name test-container python-fastapi:latest
        sleep 5
        curl -f http://localhost:8000/health/ || exit 1
        docker stop test-container
        echo "‚úÖ Container health check passed"

  # Summary job
  deployment-ready:
    name: Ready for Deployment
    runs-on: ubuntu-latest
    needs: [basic-checks]
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [ "${{ needs.basic-checks.result }}" == "success" ]; then
          echo "üéâ All checks passed - ready for deployment!"
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi